/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 12 19:17:46 GMT 2016
 */

package banking;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import banking.Money;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Money_ESTest extends Money_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Money money0 = new Money(0);
      Money money1 = new Money(5167, (-3209));
      boolean boolean0 = money0.lessEqual(money1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Money money0 = new Money(0, 0);
      Money money1 = new Money(78, 78);
      money0.subtract(money1);
      assertFalse(money0.equals((Object)money1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Money money0 = new Money(78, 78);
      String string0 = money0.toString();
      assertEquals("$78.78", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Money money0 = new Money(0);
      // Undeclared exception!
      try { 
        money0.add((Money) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("banking.Money", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Money money0 = null;
      try {
        money0 = new Money((Money) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("banking.Money", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Money money0 = new Money((-2126834765));
      boolean boolean0 = money0.lessEqual(money0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Money money0 = new Money(0, 0);
      Money money1 = new Money(78, 78);
      boolean boolean0 = money1.lessEqual(money0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Money money0 = new Money(510, 510);
      String string0 = money0.toString();
      assertEquals("$515.10", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Money money0 = new Money((-2126834765));
      String string0 = money0.toString();
      assertEquals("$-2126834765.00", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Money money0 = new Money((-404));
      money0.add(money0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Money money0 = new Money((-2126834765));
      Money money1 = new Money(money0);
      assertFalse(money1.equals((Object)money0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Money money0 = new Money(2611);
      // Undeclared exception!
      try { 
        money0.subtract((Money) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("banking.Money", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Money money0 = new Money(1);
      // Undeclared exception!
      try { 
        money0.lessEqual((Money) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("banking.Money", e);
      }
  }
}
